@inject INotificationCenter NotificationCenter
@implements IDisposable

<h1>@Broadcast</h1>
<h1>@Student.Name</h1>
<h3>@Student.Age</h3>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Subject Id</th>
            <th>Score</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var grade in Student.Grades)
        {
            <tr>
                <td>@grade.ID</td>
                <td>@grade.Score</td>
            </tr>
        }
    </tbody>
</table>

@code {
    /*
    */
    private StudentObject Student = new StudentObject();
    private string Broadcast;

    public async void Dispose()
    {
        await NotificationCenter.Dispose();

    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationCenter.InitSocket();

        Student.UpdatedInstance += (e, args) =>
        {
            StateHasChanged();
        };

        //Message listeners
        await NotificationCenter.RegisterReceiver<StudentObject>("SendStudentInfo", (student) =>
        {
            Student.UpdateStudent(student);
        });
        await NotificationCenter.RegisterReceiver<string>("SendBroadcastMessage", (message) =>
        {
            Broadcast = message;
            StateHasChanged();
        });
    }

}